// Generated by CoffeeScript 1.8.0
(() => {
  Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');
  Strophe.addConnectionPlugin('caps', (() => {
    let conn = null;

    const init = (c) => {
      conn = c;
      if (!conn.disco) throw new Error('disco plugin required!');
      if (!b64_sha1) throw new Error('SHA-1 library required!');

      conn.disco.addFeature(Strophe.NS.CAPS);
      conn.disco.addFeature(Strophe.NS.DISCO_INFO);
    };

    const pres = (attrs) => {
      return $pres(attrs).cnode(createCapsNode().tree()).up();
    };

    const createCapsNode = function() {
      let node;
      if (conn.disco._identities.length > 0)
        node = conn.disco._identities[0].name || '';
      else
        node = dummyId.name;

      return $build('c', {
        xmlns: Strophe.NS.CAPS,
        hash: 'sha-1',
        node,
        ver: ver()
      });
    };

    const ver = () => {
      const identities = Array.from(conn.disco._identities);
      const features = Array.from(conn.disco._features).sort();

      propertySort(identities, 'category');
      propertySort(identities, 'type');
      propertySort(identities, 'lang');

      let S = '';
      for (let key in identities) {
        const id = identities[key];
        S += [id.category, id.type, id.lang, id.name].join('/') + '<';
      }

      for (let ns of features)
        S += String(ns) + '<';

      return b64_sha1(S) + '=';
    };

    return {init, ver, createCapsNode, pres};
  })());

  const propertySort = (array, property) => {
    return array.sort((a, b) => {
      return (a[property] > b[property]) ? -1 : 1;
    });
  };
})();
